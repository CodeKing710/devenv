#!/bin/bash

# Sets up a common environment (Bash/GitBash)

# Vars
__cwd=$(pwd)
__alias=$(cat <<- A
	### Safety nets ###
	alias chgrp="chgrp --preserve-root"
	alias chown="chown --preserve-root"
	alias chmod="chmod --preserve-root"
	alias mv="mv -i"
	alias df="df -h"
	alias du="du -h"

	### QOL aliases ###
	alias update="sudo apt update; sudo apt upgrade -y"
	alias reload="[ -f ~/.d/rc ] && source ~/.d/rc || source ~/.bashrc"
	alias shutdown="shutdown now"
	alias tping="time ping"
	alias edit-a="nano ~/.d/alias"
	alias edit-p="nano ~/.d/prompt"
	alias edit-rc="[ -f ~/.d/rc ] && nano ~/.d/rc || nano ~/.bashrc"
	alias ipkg="sudo apt install"

	### Other aliases ###
	# Git
	alias pull="git pull"
	alias push="git push"
	alias reposync="__cwd=\\\`pwd\\\`; for repo in ~/repos/*; do cd \\\$repo; if [[ \\\`git status\\\` =~ 'pu' ]]; then basename \\\$repo; pull; push; echo ' '; fi; done; cd \\\$__cwd; unset repo __cwd"

	# VENV
	alias de="deactivate"

	### Rebound Aliases ###
	# Clear
	alias fclear="tput clear"
	alias clear="tput -x clear" # Adjust by adding \\\`printf "%\\\$((\\\$COLUMNS*\\\$LINES))s";\\\`
	alias fclr="fclear"
	alias clr="clear"

	# Remove and Copy
	alias rm="smart-rm"
	alias cp="smart-cp"

	### Execute aliases ###
	reposync
A
)
__prompt=$(cat <<- P
	PS1_GIT='\\\`[[ "\\\$(git branch 2>/dev/null | cut -d " " -f2)" == "" ]] && echo "" || echo "(\\\$(git branch 2>/dev/null | cut -d " " -f2)) "\\\`'
	PS1='\[\033]0;\u:\\\$PWD\007\]'
	PS1="\\\$PS1"'\[\e[92m\]\u\[\e[0m\]@\[\e[38;5;27m\]\h\[\e[0m\] \[\e[95m\]\w\[\e[96m\] '
	PS1="\\\$PS1""\\\$PS1_GIT"
	PS1="\\\$PS1"'\[\e[0m\]\$ '
	unset PS1_GIT
P
)
__smartrm=$(cat << SR
#!/bin/bash
for arg in "\\\$@"; do
	if [ -d "\\\$arg" ]; then
		rm -rf "\\\$arg"
	else
		rm -f "\\\$arg"
	fi
done
SR
)
__smartcp=$(cat <<- SC
	#!/bin/bash
	[ -d \\\$1 ] && cp -r \\\$1 \\\$2 || cp \\\$1 \\\$2
SC
)
__kjob=$(cat <<- K
	#!/bin/bash
	[ -z "\\\$1" ] && echo "Usage: kjob <processname>" || ( ps | grep \\\$1 | sed "s| \\+| |g" | sed "s/ //" | cut -d ' ' -f1 | xargs -i kill {} )
K
)
__yn=$(cat <<- Y
	#!/bin/bash
	[[ ! "\\\$1" == "" && ! "\\\$2" == "" && ! "\\\$3" == "" ]] && ( read -p "\\\$1 " yn; [[ "\\\${yn,}" =~ 'y' ]] && eval \\\$2 || eval \\\$3 ) || ( echo "Cannot process yn context!"; exit 1 )
Y
)
__cal=$(cat <<- CAL
	#!/bin/bash
	[ -z "\\\$1" ] && (while true; do read -p "> " expr; [[ "\\\$expr" =~ "q" ]] && exit || echo "\\\${expr}=\\\$((\\\${expr}))"; done ) || ( for arg in \\\$@; do echo "\\\${arg}=\\\$((\\\${arg}))"; done )
CAL
)
__rcupdate=$(cat << RC
# ENV EXT
if [ -d \\\$HOME/.d ]; then
	for rc in \\\$HOME/.d/*; do
		if [ -f "\\\$rc" ]; then
			. "\\\$rc"
		fi
	done
fi
RC
)

# Ensure env vars are good
[ -z "$USER" ] && echo 'USER=`id -u -n`' >> "$HOME"/.bashrc

# Ensure user's .bashrc file contains .d check
[[ ! "$(cat "$HOME"/.bashrc)" =~ "# ENV EXT" ]] && echo "$__rcupdate" >> "$HOME"/.bashrc

# Setup user's home directory
[ ! -d "$HOME"/bin ] && mkdir "$HOME"/bin
[ ! -d "$HOME"/.d ] && mkdir "$HOME"/.d
[ ! -d "$HOME"/repos ] && mkdir "$HOME"/repos
[ ! -e "$HOME"/.d/alias ] && echo "$__alias" > "$HOME"/.d/alias
[ ! -e "$HOME"/.d/prompt ] && echo "$__prompt" > "$HOME"/.d/prompt
[ ! -e "$HOME"/bin/kjob ] && echo "$__kjob" > "$HOME"/bin/kjob
[ ! -e "$HOME"/bin/smart-rm ] && echo "$__smartrm" > "$HOME"/bin/smart-rm
[ ! -e "$HOME"/bin/smart-cp ] && echo "$__smartcp" > "$HOME"/bin/smart-cp
[ ! -e "$HOME"/bin/yn ] && echo "$__yn" > "$HOME"/bin/yn
[ ! -e "$HOME"/bin/cal ] && echo "$__cal" > "$HOME"/bin/cal

# Ask about installing helper programs
# BSM
read -rp "Would you like to install the script manager? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/Bash-Script-Manager
	cd "$__cwd" || exit
fi
# CLApp
read -rp "Would you like to install the CLI app generator? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/clapp
	cd "$__cwd" || exit
fi
# VEM
read -rp "Would you like to install the Virtual Environment Manager? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/VEM
	cd "$__cwd" || exit
fi

# Make all new bin scripts executable
chown -R "$USER" "$HOME"/bin/*
chgrp -R "$USER" "$HOME"/bin/*
chmod -R +x "$HOME"/bin/*

# Ask if user wants to remove the repo since the environment is setup
read -rp "Would you like to delete the repo? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	rm -rf "$(find ~ -type d -name devenv)"
fi

# Cleanup
if [ "$$" -eq "$BASHPID" ]; then
	unset __alias __prompt __smartrm __smartcp __yn __kjob __rcupdate __cal yn __cwd
fi
