#!/bin/bash

# Sets up a common environment (Bash/GitBash)

# Vars
__cwd=$(pwd)
__alias=$(cat <<- A
	### Safety nets ###
	alias chgrp="chgrp --preserve-root"
	alias chown="chown --preserve-root"
	alias chmod="chmod --preserve-root"
	alias mv="mv -i"
	alias df="df -h"
	alias du="du -h"

	### Ensured presets ###
	alias la="ls -A"
	alias ll="ls -l -A"

	### QOL aliases ###
	# Ubuntu-specific
	alias update="sudo apt update; sudo apt upgrade -y"
	alias ipkg="sudo apt install"
	alias shutdown="shutdown now"
	
	# All
	alias reload="source ~/.bashrc"
	alias tping="time ping"
	alias edit-a="[ -f ~/.d/alias?(es) ] && nano ~/.d/alias?(es) || nano ~/.*(alias)?(es)"
	alias edit-rc="[ -f ~/.d/rc ] && nano ~/.d/rc || nano ~/.bashrc"
	alias edit-p="nano ~/.d/prompt"
	alias edit-p="nano ~/.d/funcs"

	### Other aliases ###
	# Git
	alias pull="git pull"
	alias push="git push"
	alias reposync="__cwd=\$(pwd); for repo in ~/repos/*; do cd \$repo; basename \$repo; pull; push; echo ' '; fi; done; cd \$__cwd; unset repo __cwd"

	# VENV
	alias de="deactivate"

	# Network Tools
	alias ip="ip addr show 2>/dev/null || ipconfig"
	alias ns="nslookup"

	# String Tools
	alias sub="expr substr"
	alias len="expr length"

	# Other
	alias iperl="perl -e 'do{print(\\"perl> \\");\\\$_x=<>;chomp \\\$_x;print(eval(\\\$_x).\\"\\n\\")}while(\\\$_x ne \\"q\\")'"

	### Re-bound Aliases ###
	# Clear
	alias fclear="tput clear"
	alias clear="tput -x clear"
	## Uncomment the below ones if you want shorthand
	#alias fclr="fclear"
	#alias clr="clear"

	# Remove and Copy
	alias rm="smart-rm"
	alias cp="smart-cp"

	# Shorthand Formats (REQUIRES EXPAND_ALIASES)
	alias hr="print \\"%0.s-\\" \\\$(seq 1 \\\$COLUMNS)"

	# Alias to see versions of all apps installed to repos
	alias appvs="for _repo in ~/repos/*; do \$(basename \$_repo) --version 2>/dev/null; done; unset _repo;"

	### Execute aliases ###
A
)
__prompt=$(cat <<- P
	PS1_GIT='\$([[ -n "\$(git branch 2>/dev/null | cut -d " " -f2)" ]] && echo "(\$(git branch 2>/dev/null | cut -d " " -f2)) " || { [[ -e ./.git ]] && echo "(\$(git config --global --list | grep defaultbranch | cut -d '=' -f2)) "; })'
	PS1="\$PS1"'\[\e[92m\]\u\[\e[0m\]@\[\e[38;5;27m\]\h\[\e[0m\] \[\e[95m\]\w\[\e[96m\] '
	PS1="\$PS1""\$PS1_GIT"
	PS1="\$PS1"'\[\e[0m\]$ '
	unset PS1_GIT
P
)
__smartrm=$(cat << SR
#!/bin/bash

[[ "\$1" =~ ^(-f|--force)$ ]] && { choice='f'; shift; } || choice='I'

while [[ -n "\$1" ]]; do
  if [[ "\$1" =~ ^- ]]; then
		if [[ -d "\$1" ]]; then
			rm -r"\$choice" -- "\$1"
		else
			rm -"\$choice" -- "\$1"
		fi
	elif [[ -d "$1" ]]; then
		rm -r"\$choice" "\$1"
	else
		rm -"\$choice" "\$1"
	fi
shift; done
SR
)
__smartcp=$(cat <<- SC
	#!/bin/bash
	[[ -d "\$1" ]] && cp -r "\${1}" "\${2}/" || cp "\${1}" "\${2}/\${1}"
SC
)
__kjob=$(cat <<- K
	#!/bin/bash
	[ -z "\$1" ] && echo "Usage: kjob <processname>" || ( ps | grep "\$1" | sed "s| \\+| |g" | sed "s/ //" | cut -d ' ' -f1 | xargs -i kill {} )
K
)
__yn=$(cat <<- Y
	#!/bin/bash
	[[ ! "\$1" == "" && ! "\$2" == "" && ! "\$3" == "" ]] && ( read -rp "\$1 " yn; [[ "\${yn,}" =~ 'y' ]] && eval "\$2" || eval "\$3" ) || ( echo "Cannot process yn context!"; exit 1 )
Y
)
__cal=$(cat <<- CAL
	#!/bin/bash
	[ -z "\$1" ] && (while true; do read -p "> " expr; [[ "\$expr" =~ "q" ]] && exit || echo "\${expr}=\$((\${expr}))"; done ) || ( for arg in \$@; do echo "\${arg}=\$((\${arg}))"; done )
CAL
)
__rcupdate=$(cat << RC
# ENV EXT
shopt -s extglob
shopt -s checkwinsize
shopt -s checkhash
set -o igncr
set -o emacs

if [ -d \$HOME/.d ]; then
	for rc in \$HOME/.d/*; do
		if [ -f "\$rc" ]; then
			. "\$rc"
		fi
	done
fi

export COLUMNS LINES TZ=\$(tzset)
RC
)

__funcs=$(cat << FUNC
### QoL Functions ###

# Use this instead of the \`read\` command
prompt() {
	local err=0
	trap 'return \$err' SIGINT
	history -w
	history -c
	read -rep "\$*" var
	echo "\$var"
	history -r
	return \$err
}; export -f prompt
FUNC
)

# Ensure env vars are good
[ -z "$USER" ] && echo 'USER=`id -u -n`' >> "$HOME"/.bashrc

# Ensure user's .bashrc file contains .d check
[[ ! "$(cat "$HOME"/.bashrc)" =~ "# ENV EXT" ]] && echo "$__rcupdate" >> "$HOME"/.bashrc

# Setup user's home directory
[ ! -d "$HOME"/bin ] && mkdir "$HOME"/bin
[ ! -d "$HOME"/.d ] && mkdir "$HOME"/.d
[ ! -d "$HOME"/repos ] && mkdir "$HOME"/repos
[ ! -e "$HOME"/.d/alias ] && echo "$__alias" > "$HOME"/.d/alias
[ ! -e "$HOME"/.d/prompt ] && echo "$__prompt" > "$HOME"/.d/prompt
[ ! -e "$HOME"/.d/funcs ] && echo "$__funcs" > "$HOME"/.d/funcs
[ ! -e "$HOME"/bin/kjob ] && echo "$__kjob" > "$HOME"/bin/kjob
[ ! -e "$HOME"/bin/smart-rm ] && echo "$__smartrm" > "$HOME"/bin/smart-rm
[ ! -e "$HOME"/bin/smart-cp ] && echo "$__smartcp" > "$HOME"/bin/smart-cp
[ ! -e "$HOME"/bin/yn ] && echo "$__yn" > "$HOME"/bin/yn
[ ! -e "$HOME"/bin/cal ] && echo "$__cal" > "$HOME"/bin/cal

# Ask about installing helper programs
# BSM
read -rp "Would you like to install the script manager? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/bsm
	cd "$__cwd" || exit
fi
# CLApp
read -rp "Would you like to install the CLI app generator? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/clapp
	cd "$__cwd" || exit
fi
# VEM
read -rp "Would you like to install the Virtual Environment Manager? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/vem
	cd "$__cwd" || exit
fi
# CHPATH
read -rp "Would you like to install the Path Manager? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/chpath
	cd "$__cwd" || exit
fi

# CLI Semver
read -rp "Would you like to install the Semantic Versioner? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/semver
	cd "$__cwd" || exit
fi

# Regular Expression Builder
read -rp "Would you like to install the Regular Expression Builder? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	cd "$HOME"/repos || exit
	git clone https://github.com/CodeKing710/bsed
	cd "$__cwd" || exit
fi

# Ensure all new bin scripts executable
chown -R "$USER" "$HOME"/bin/*
chgrp -R "$USER" "$HOME"/bin/*
chmod -R +x "$HOME"/bin/*

# Ask if user wants to remove the repo since the environment is setup
read -rp "Would you like to delete the repo? " yn
if [[ "${yn,,}" =~ "y" ]]; then
	rm -rf "$(find ~ -type d -name devenv)"
fi

# Cleanup
if [ "$$" -eq "$BASHPID" ]; then
	unset __alias __prompt __smartrm __smartcp __yn __kjob __rcupdate __cal yn __cwd
fi
